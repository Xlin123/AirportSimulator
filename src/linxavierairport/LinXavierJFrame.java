/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package linxavierairport;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Timer;


/**
 *
 * @author Xavier
 */
public class LinXavierJFrame extends javax.swing.JFrame {
    
    
    //Global variables, 
    Queue<Integer> takeoffs = new LinkedList<>();
    Queue<Integer> arrivals = new LinkedList<>();
    File arrivalFile = new File("arrivals.txt");
    File takeoffFile = new File("takeoffs.txt");
    boolean firstRun = true;
    /**
     * Creates new form New_JFrame
     */
    public LinXavierJFrame() {
        initComponents();
        
        //reading file to display the arrivals and takeoffs in the files at the start
        error.setVisible(false);
        String arrivalBuffer = readFile(arrivalFile, true);
        String takeoffBuffer = readFile(takeoffFile, false);
        Arrivals.setText(arrivalBuffer);
        Takeoffs.setText(takeoffBuffer);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Takeoffs = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        Arrivals = new javax.swing.JTextArea();
        Start = new javax.swing.JButton();
        addArrivals = new javax.swing.JTextField();
        addTakeoffs = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Status = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        error = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Airport Simulator");

        jScrollPane1.setFocusable(false);

        Takeoffs.setEditable(false);
        Takeoffs.setColumns(20);
        Takeoffs.setRows(5);
        Takeoffs.setFocusable(false);
        jScrollPane1.setViewportView(Takeoffs);

        jScrollPane2.setFocusable(false);

        Arrivals.setEditable(false);
        Arrivals.setColumns(20);
        Arrivals.setRows(5);
        Arrivals.setFocusable(false);
        jScrollPane2.setViewportView(Arrivals);

        Start.setText("Start");
        Start.setFocusable(false);
        Start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartActionPerformed(evt);
            }
        });

        addArrivals.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                addArrivalsKeyPressed(evt);
            }
        });

        addTakeoffs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTakeoffsActionPerformed(evt);
            }
        });
        addTakeoffs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                addTakeoffsKeyPressed(evt);
            }
        });

        jLabel2.setText("Arriving Flight:");

        jLabel3.setText("Takeoff flight:");

        jLabel4.setText("Arrivals:");

        jLabel5.setText("Takeoffs:");

        Status.setText("Waiting for Simulator...");

        jButton1.setText("exit");
        jButton1.setFocusable(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        error.setText("Please enter a valid number.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(addArrivals, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 193, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(addTakeoffs, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(36, 36, 36))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(193, 193, 193)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(123, 123, 123)
                                .addComponent(Start)
                                .addGap(59, 59, 59)
                                .addComponent(jLabel5))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(128, 128, 128)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(error)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1)
                                        .addComponent(Status)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(1, 1, 1)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Start)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addComponent(Status)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addArrivals, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addTakeoffs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(error)
                .addGap(40, 40, 40))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addTakeoffsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTakeoffsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addTakeoffsActionPerformed

    private void StartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartActionPerformed
        // TODO add your handling code here:
        
        //only on the first time you click the start button I want to make a new timer object.
        if(firstRun)
        {
            Timer t;
            t = new Timer(600, new TimerListener(this)); 
            t.start();
            firstRun=false;
        }
        
        //for all other times, reset the queues, and re read the starting files.
        else
        {   
            arrivals.removeAll(arrivals);
            takeoffs.removeAll(takeoffs);
            String arrivalBuffer = readFile(arrivalFile, true);
            String takeoffBuffer = readFile(takeoffFile, false);
            Arrivals.setText(arrivalBuffer);
            Takeoffs.setText(takeoffBuffer);
        }
    }//GEN-LAST:event_StartActionPerformed

    private void addTakeoffsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addTakeoffsKeyPressed
        // TODO add your handling code here:
        
        //If the player presses enter, 
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
        {
            Integer input = tryParse(addTakeoffs.getText());
            //if input is in proper format add the takeoff flight ID into the queue
            if(input!=null)
            {
                error.setVisible(false);
                takeoffs = updateQueue(takeoffs,input);
                updateStatus(2,input,0);
                String output = queueToString(takeoffs);
                Takeoffs.setText(output);
                addTakeoffs.setText("");
            }
        }
    }//GEN-LAST:event_addTakeoffsKeyPressed

    private void addArrivalsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addArrivalsKeyPressed
        // TODO add your handling code here:
        
        //If the player presses enter
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
        {
            Integer input=tryParse(addArrivals.getText()); 
            //and if the input is in proper format, add the arrival ID into the queue.
            if(input!=null)
            {
                error.setVisible(false);
                arrivals = updateQueue(arrivals,input);
                updateStatus(1,input,0);
                String output = queueToString(arrivals);
                Arrivals.setText(output);
                addArrivals.setText("");
            }
        }
    }//GEN-LAST:event_addArrivalsKeyPressed

    
    //exit button
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed
 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LinXavierJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LinXavierJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LinXavierJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LinXavierJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LinXavierJFrame().setVisible(true);
            }
        });
        
        
        
    }
    
    
    //updating methods
    //
    //
    /***
     * Updates the status message every time it is called in the timer. 
     * @param mode different status messages
     * @param flightName given flight name
     * @param seconds to print when the plane is leaving or landing.
     */
    void updateStatus(int mode, int flightName,double seconds)
    {
        
        switch(mode)
        {
            case 0:
                Status.setText("Waiting for simulator to start.");
                break;
            case 1:
                Status.setText("Queueing "+flightName + " for arrivals.");
                break;
            case 2: 
                Status.setText("Queueing "+flightName + " for takeoffs.");
                break;
            case 3:
                Status.setText("Flight "+flightName + " has arrived.");
                break;
            case 4:
                Status.setText("Flight "+flightName + " has taken off.");
                break;
            case 5:
                Status.setText("Flight " + flightName + " is landing in " + seconds + " seconds.");
                break;
            case 6:
                Status.setText("Flight " + flightName + " is taking off in " + seconds + " seconds.");
                break;
            default:
                Status.setText("Queues are empty");
                break;
        }
    }
    
    /***
     * removing airplane from queue
     * @param mode arrival = true, takeoff = false
     */
    void updateQueue(boolean mode)
    {
        int flightNumber;
        //arrivals
        if(mode)
        {
            //remove first in line, then update status and update the arrivals text box
            flightNumber=arrivals.poll();
            updateStatus(3,flightNumber,0);
            String print = queueToString(arrivals);
            Arrivals.setText(print);
        }
        //takeoffs
        else
        {
            ////remove first in line, then update status and update the takeoffs text box
            flightNumber=takeoffs.poll();
            updateStatus(4,flightNumber,0);
            String print = queueToString(takeoffs);
            Takeoffs.setText(print);
        }
    }
    
    
    
    /***
     * adding airplane to queue by updating it.
     * @param q 
     * @param flightNumber
     * @return updated queue
     */
    Queue<Integer> updateQueue(Queue<Integer> q, int flightNumber)
    {
        Queue<Integer> output = q;
        output.add(flightNumber);
        return output;
    }
    
    
    //utility functions
    //
    //
    
    /***
     * tries to parse a string
     * @param text
     * @return  null if it cannot parse to int
     */
    Integer tryParse(String text) 
    {
        try 
        {
            return Integer.parseInt(text);
        } 
        catch (NumberFormatException e) 
        {
            error.setVisible(true);
            return null;
        }
    }
    
    /**
     * Reading the file and updating the proper queues.
     * @param file which file to read
     * @param mode arrivals = true, takeoffs = false
     * @return String of flight IDs seperated by new lines
     */
    String readFile(File file, boolean mode)
    {
        Scanner scan=null;
        String buffer = "";
        try {
            scan = new Scanner(file);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(LinXavierJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //looping through the file, adding them to queue and to string buffer.
        while(scan.hasNext())
        {
            int temp = scan.nextInt();
            if(mode)
                arrivals.add(temp);
            else
                takeoffs.add(temp);
            buffer+=(temp + "\n");
        }
        
        return buffer;
    }
    
    /***
     * queue  to String
     * @param b
     * @return String
     */
    String queueToString(Queue<Integer> b)
    {
        String output = "";
        for(Integer a : b)
        {
            output += (a + "\n");
        }
        return output;   
    }
    
    
    
    
    
    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Arrivals;
    private javax.swing.JButton Start;
    private javax.swing.JLabel Status;
    private javax.swing.JTextArea Takeoffs;
    private javax.swing.JTextField addArrivals;
    private javax.swing.JTextField addTakeoffs;
    private javax.swing.JLabel error;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}


class TimerListener implements ActionListener 
{
    
    //counting which "time unit" we are currently on
    int counter = 0;
    double seconds = 2.4-(counter * 0.6);
    //our 2:1 landing to takeoff ratio
    int index =1;
    
    //if the next flight is arrival or takeoff
    String next = "arrival";
    
    //passing in our current JFrame so I can use the methods inside.
    LinXavierJFrame j;
    TimerListener(LinXavierJFrame j)
    {
        this.j=j;
    }
    @Override
    public void actionPerformed(ActionEvent e) 
    {
        //Rounding the seconds.
       seconds = 2.4-(counter * 0.6);
       seconds = Math.round(seconds * 100.0) / 100.0;
       
       //while both queues are empty, reset the counter, index, next and update the status to show empty queues.
       if(j.arrivals.isEmpty() && j.takeoffs.isEmpty())
       {
           j.updateStatus(20, 0,seconds);
           index = 1;
           counter = 0;
           next ="";
       }
       
       //updates the status to show if the next flight is a takeoff or landing.
       else if(next.equals("takeoff"))
         j.updateStatus(6, j.takeoffs.peek(),seconds);  
       else if(next.equals("arrival"))
       {
           j.updateStatus(5, j.arrivals.peek(),seconds);
       }
       
       //while both queues are empty, next is set to be empty
       //if an item is added to the queue then none of if statements above will work
       //so we set counter to 4 so it can check whether or not the flight is a takeoff or landing.
       else
       {
            counter=4;
       }
       
       //if counter is equal to or greater than 4 time units
       if(counter>=4)
       {
           //if we know what the next flight is doing, then update the queues
           if(!next.isEmpty())
           {
               if(j.arrivals.isEmpty())
                {
                    j.updateQueue(false);
                }   
                else if(j.takeoffs.isEmpty())
                {
                    j.updateQueue(true);
                }
                else
                {        
                    if(next.equals("arrival"))
                        j.updateQueue(true);
                    else
                        j.updateQueue(false);
                }
           }
           
           //checking whether our flight is a takeoff or landing
           index++;
           if(index%3==0 || j.arrivals.isEmpty())
                next="takeoff";
           else if(index%3!=0 || j.takeoffs.isEmpty())
                next="arrival";  
           
           counter=-1;
       }
       
       //adding time units depending on what the next flight is doing.
        if(next.equals("arrival"))
           counter++;
        else
           counter+=2;
    }
    
}